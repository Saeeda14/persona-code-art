- name: "fetching instance details"
  become: false
  hosts: localhost
  connection: local
  vars:
    region: "us-east-1"
    asg_name: "my-app-asg"          # name of autoscaling group

  environment:
    AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
    AWS_DEFAULT_REGION: "{{ lookup('env','AWS_DEFAULT_REGION') | default(aws_region) }}"


  tasks:

    - name: "Sanity: who am I?"
      command: aws sts get-caller-identity
      changed_when: false

    - name: "gathering instance details"
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:aws:autoscaling:groupName": "{{ asg_name }}"
          instance-state-name: [ "running" ]
      register: instance_details

    - name: "creating dynamic inventory"
      add_host:
        groups: "asg_instances"
        hostname: "{{ item.public_ip_address }}"
        ansible_host: "{{ item.public_ip_address }}"
        ansible_user: "{{ lookup('env','EC2_USER') | default('ubuntu') }}"
        ansible_ssh_private_key_file: "{{ lookup('env','GITHUB_WORKSPACE') }}/my_as_key"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      loop: "{{ instance_details.instances }}"


- name: Deploy container from ECR
  hosts: asg_instances
  become: yes
  vars:
    aws_region: "us-east-1"
    aws_account_id: ""             # passed via -e from workflow
    repository: "my-dev-ecr-repo"  # your ECR repo name
    image_tag: ""                  # passed via -e from workflow
    container_name: "myapp"
    host_port: 80
    container_port: 80
    registry: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com"
    image_ref: "{{ registry }}/{{ repository }}:{{ image_tag }}"
  tasks:
    - name: Get ECR login password
      command: "aws ecr get-login-password --region {{ aws_region }}"
      register: ecr_pwd
      changed_when: false
    - name: Docker login to ECR
      community.docker.docker_login:
        registry_url: "{{ registry }}"
        username: AWS
        password: "{{ ecr_pwd.stdout }}"
    - name: Pull the image
      community.docker.docker_image:
        name: "{{ image_ref }}"
        source: pull
    - name: Run/replace the container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_ref }}"
        state: started
        recreate: true
        restart_policy: always
        published_ports:
          - "{{ host_port }}:{{ container_port }}"